
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage,font,messagebox
from dbconnectionadmin import get_all_players,add_player
from tkinter import ttk
import tkinter as tk

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\Soham\Desktop\RAMDOM PROJECTS\cricket_league_management\ui\build\admindash\assets1\assetsplayer\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)



def search():
    search_query = entry_1.get()
    standings = get_all_players(search_query)
    if not standings:
        messagebox.showerror("Error","No Data available")
        return

    style = ttk.Style()
    style.configure("Treeview", font=("Iceland", 22))  # Change font for rows
    style.configure("Treeview.Heading", font=("Iceland", 24, "bold")) 
    style.configure("Treeview", rowheight=38) # Change font for headings

    # Create Treeview widget
    columns = ("Player Id","Player Name","Role","Team Name")
    column_ratios = [0.2,0.3,0.2,0.3]  # Adjust ratios (sum should be 1.0)
    total_width = 500  # Set total width of the table

    tree = ttk.Treeview(window, columns=columns, show="headings")

    # Define column headings & set width dynamically
    for col, ratio in zip(columns, column_ratios):
        tree.heading(col, text=col)
        tree.column(col, anchor="center", width=int(total_width * ratio))
    tree.place(x=140, y=240, width=900, height=420)  # Adjust placement & size

    # Insert data into the table
    for team in standings:
        tree.insert("", "end", values=(
            team["player_id"],
            team["player_name"],
            team["role"],
            team["team_name"]        
        ))



def add():
    add_window = tk.Toplevel()
    add_window.title("Add Player")
    add_window.geometry("300x200")

    tk.Label(add_window, text="Player Name:").pack(pady=5)
    entry_name = tk.Entry(add_window)
    entry_name.pack(pady=5)

    tk.Label(add_window, text="Role:").pack(pady=5)
    role_var = tk.StringVar()
    role_dropdown = ttk.Combobox(add_window, textvariable=role_var, values=["Batsman", "Bowler", "WicketKeeper"], state="readonly")
    role_dropdown.pack(pady=5)
    role_dropdown.current(0)  # Set default selection

    def submit():
        player_name = entry_name.get().strip()
        role = role_var.get().strip()

        if not player_name or not role:
            messagebox.showwarning("Input Error", "All fields are required.")
            return

        if add_player(player_name, role):  # Call database function
            messagebox.showinfo("Success", "Player added successfully!")
            add_window.destroy()
        else:
            messagebox.showerror("Error", "Failed to add player.")

    tk.Button(add_window, text="Add Player", command=submit).pack(pady=10)
    add_window.mainloop()
    
    






def edit():
    pass
    
def delete():
    pass
def profile():
    pass


window = Tk()

window.geometry("1368x720")
window.configure(bg = "#FFFFFF")
custom_font = font.Font(family="Iceland", size=30)
window.title("PlayerManagement")

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 720,
    width = 1368,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    684.0,
    360.0,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    414.0,
    59.0,
    image=image_image_2
)

canvas.create_rectangle(
    91.0,
    181.0,
    1087.0,
    690.0,
    fill="#F9F5C9",
    outline="")

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    347.0,
    186.0,
    image=image_image_3
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    347.0,
    186.0,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#FFF8F8",
    fg="#000716",
    font=custom_font,
    highlightthickness=0
)
entry_1.place(
    x=146.0,
    y=159.0,
    width=402.0,
    height=52.0
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=profile,
    relief="flat"
)
button_1.place(
    x=1107.0,
    y=629.0,
    width=172.0,
    height=61.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=delete,
    relief="flat"
)
button_2.place(
    x=1101.0,
    y=537.0,
    width=172.0,
    height=61.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=edit,
    relief="flat"
)
button_3.place(
    x=1101.0,
    y=445.0,
    width=172.0,
    height=61.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=add,
    relief="flat"
)
button_4.place(
    x=1101.0,
    y=353.0,
    width=172.0,
    height=61.0
)

button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=search,
    relief="flat"
)
button_5.place(
    x=562.0,
    y=157.0,
    width=172.0,
    height=61.0
)

search()



window.resizable(False, False)
window.mainloop()
